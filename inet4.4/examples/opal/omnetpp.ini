[General]
network = inet.examples.opal.OpalTest
sim-time-limit = 0.2s

*.node[*].wlan.bitrate = 6Mbps
*.node[*].wlan.mac.dcf.rateSelection.multicastFrameBitrate = 6Mbps
*.node[*].wlan.mac.dcf.rateSelection.dataFrameBitrate = 6Mbps
*.node[*].wlan.mac.dcf.rateSelection.dataFrameBandwidth = 20MHz

*.*.wlan.mac.dcf.channelAccess.contention.initialChannelBusy = false
*.*.wlan.radio.bandName="5.9 GHz"
*.node[*].wlan.radio.centerFrequency=5.9GHz
*.radioMedium.mediumLimitCache.centerFrequency=5.9GHz
*.radioMedium.mediumLimitCache.maxTransmissionDuration = 0.5s
*.node[*].wlan.radio.transmitter.power=1W #(23 dBm)


[Config plmodels]
#Path loss models provided by INET
result-dir=plmodels
**.bitrate = 6Mbps
*.*.wlan.mac.dcf.channelAccess.contention.initialChannelBusy = false
*.*.wlan.radio.bandName="5.9 GHz"

# mobility settings
*.*.mobility.initFromDisplayString = false
*.*.mobility.typename = "StationaryMobility"

*.*.mobility.initialY = 200m
*.*.mobility.initialZ = 2m #height according to INET

*.node[0].mobility.initialX = 0m
*.node[1].mobility.initialX = ${distance=0..50 step 0.25, 51..100 step 1, 105..200 step 5, 220..1000 step 20}m


*.radioMedium.pathLoss.typename = ${pathlosstype="FreeSpacePathLoss","TwoRayInterference"}

[Config freespace]
sim-time-limit = 1s
result-dir=freespace

# mobility settings
*.*.mobility.initFromDisplayString = false
#*.*.mobility.typename = "StationaryMobility"
#WARNING:Unity uses a left-handed coordinate system with Y axis as up, whereas INET uses Z axis as up
#if meshes have been exported from Unity, or coordinates are provided by Unity, we have to interchange axis, to keep everything consistent
#Transformation matrices coming from Unity also have to be kept consistent
#Otherwise, we can just keep the INET coordinates
#Since meshes have been generated by Uniy, I switch axes
#*.*.mobility.initialZ = 0m
#*.*.mobility.initialY = 10m #height according to Unity
*.node[0].generatorType="inet.veneris.opal.test.OpalTest"
*.node[1].mobilityType = "StationaryMobility"
*.node[0].mobilityType = "LinearMobility"
*.node[0].mobility.initialMovementHeading=0deg
*.node[0].mobility.speed=10mps
*.node[0].mobility.updateDisplayString=false
#*.node[1].generatorType="inet.veneris.opal.test.OpalTestTransmitter"
*.node[1].generatorType="inet.veneris.opal.test.OpalTestPeriodicGenerator"
*.node[0].initialX = 0m
*.node[1].initialX = 10m
*.node[*].initialZ = 0m
*.node[*].initialY = 10m #height according to Unity

*.radioMedium.typename = "inet.veneris.opal.OpalRadioMedium"
#Since we do not use any meshes
*.radioMedium.useJson=false
#To be able to use extended callback in DEBUG mode
check-signals = false
*.radioMedium.useExtendedCallback = true
*.radioMedium.isStatic = true
[Config opal] #Two-ray ground model

sim-time-limit = 1s
result-dir=opal


# mobility settings
*.*.mobility.initFromDisplayString = false
*.*.mobility.typename = "StationaryMobility"
#WARNING:Unity uses a left-handed coordinate system with Y axis as up, whereas INET uses Z axis as up
#if meshes have been exported from Unity, or coordinates are provided by Unity, we have to interchange axis, to keep everything consistent
#Transformation matrices coming from Unity also have to be kept consistent
#Otherwise, we can just keep the INET coordinates
#Since meshes have been generated by Uniy, I switch axes
*.*.mobility.initialZ = 200m
*.*.mobility.initialY = 2m #height according to Unity
*.node[0].generatorType="OpalTest"
*.node[1].generatorType="OpalTestTransmitter"
*.node[0].mobility.initialX = 0m
*.node[1].mobility.initialX = ${distance=0..50 step 0.25, 51..100 step 1, 105..200 step 5, 220..1000 step 20}m

*.radioMedium.typename = "OpalRadioMedium"
*.radioMedium.loadMeshesFromFile=${loadMeshes=true}

*.radioMedium.meshesPath="meshes"
*.radioMedium.meshes="LargePlane"


[Config two-ray] #Another two-ray ground model, with node manager
network = inet.examples.opal.OpalNodeManager
sim-time-limit = 1s
result-dir=two-ray
*.nodes = 1 #If we use NodeManager this value must be 0
*.nodeManager.typename = "inet.veneris.opal.test.FileNodeManager"
*.nodeManager.moduleType = "inet.veneris.opal.test.OpalNode"
*.nodeManager.filename = "100nodes.txt"

# mobility settings
*.*.mobility.initFromDisplayString = false
*.*.mobility.typename = "StationaryMobility"

*.node[1..99].generatorType="inet.veneris.opal.test.OpalTest"
*.node[0].generatorType="OpalTestTransmitter"
*.node[0].initialX = 0m
*.node[0].initialY = 10m
*.node[0].initialZ = 0m

*.radioMedium.typename = "OpalRadioMedium"
*.radioMedium.loadMeshesFromFile=${loadMeshes=true}
*.radioMedium.useJson=false
*.radioMedium.meshesPath="meshes"
*.radioMedium.meshes="LargePlane"

[Config CrossingStreetValidation]
#Plane and 4 cubes representing a street. Transmitter moves horizontally (X-axis) at each repetition, while receiver keeps stopped
network = inet.examples.opal.OpalTest
sim-time-limit = 1s
result-dir=crossval



# mobility settings
*.*.mobility.initFromDisplayString = false
*.*.mobility.typename = "StationaryMobility"
#WARNING:Unity uses a left-handed coordinate system with Y axis as up, whereas INET uses Z axis as up
#if meshes have been exported from Unity, or coordinates are provided by Unity, we have to interchange axis, to keep everything consistent
#Transformation matrices coming from Unity also have to be kept consistent
#Otherwise, we can just keep the INET coordinates
#Since meshes have been generated by Uniy, I switch axes

*.*.mobility.initialY = 2m # height in Unity
*.node[0].generatorType="OpalTest"
*.node[1].generatorType="OpalTestTransmitter"
#Receiver
*.node[0].mobility.initialX = 0m
*.node[0].mobility.initialZ = 100m
#Transmitter
*.node[1].mobility.initialX = ${distance=-50..50 step 1}m
*.node[1].mobility.initialZ = 50m

*.radioMedium.recordCommunicationLog = true
*.radioMedium.typename = "OpalRadioMedium"
*.radioMedium.loadMeshesFromFile=${loadMeshes=true}

*.radioMedium.meshesPath="meshes"
*.radioMedium.meshes="Plane Cube-NW Cube-NE Cube-SW Cube-SE"
*.radioMedium.maxNumberOfReflections = 2