//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "ExternalClockScheduler.h"

namespace inet {

Register_Class(ExternalClockScheduler);

ExternalClockScheduler::ExternalClockScheduler() {

    t_external=0.0;

}

ExternalClockScheduler::~ExternalClockScheduler() {
    // TODO Auto-generated destructor stub
}

std::string ExternalClockScheduler::str() const {
    return "External Clock Scheduler";
}

cEvent* ExternalClockScheduler::guessNextEvent() {
    return sim->getFES()->peekFirst();

}

cEvent* ExternalClockScheduler::takeNextEvent() {

    while (true) {
        cEvent *event = sim->getFES()->peekFirst();
        if (event==nullptr) {
            //There is no event in the FES: this may happen if events are  generated by the external entity. It does not mean that simulation
            //can be ended, since the external entity may generate messages later
            return nullptr;
            //  throw cTerminationException(E_ENDEDOK);

        }
        if(event->getArrivalTime() <= t_external) {
            cEvent *event = sim->getFES()->removeFirst();
            if (event->isStale()) {
                delete event;
            } else {
                return event;
            }
        } else {
            return nullptr;
        }
    }


}

void ExternalClockScheduler::startRun() {
    t_external=0.0;
}

void ExternalClockScheduler::setExternalTime(simtime_t _t_external) {
    t_external= _t_external;

}

void ExternalClockScheduler::putBackEvent(cEvent* event) {
    sim->getFES()->putBackFirst(event);


}


} /* namespace inet */
