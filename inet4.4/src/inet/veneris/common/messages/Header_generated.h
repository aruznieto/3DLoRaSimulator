// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEADER_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_HEADER_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct Header;
struct HeaderBuilder;

struct Header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_SIZE = 6,
    VT_TIME = 8
  };
  Veneris::Communications::VenerisMessageTypes type() const {
    return static_cast<Veneris::Communications::VenerisMessageTypes>(GetField<uint32_t>(VT_TYPE, 0));
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  float time() const {
    return GetField<float>(VT_TIME, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyField<float>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  typedef Header Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(Veneris::Communications::VenerisMessageTypes type) {
    fbb_.AddElement<uint32_t>(Header::VT_TYPE, static_cast<uint32_t>(type), 0);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Header::VT_SIZE, size, 0);
  }
  void add_time(float time) {
    fbb_.AddElement<float>(Header::VT_TIME, time, 0.0f);
  }
  explicit HeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline flatbuffers::Offset<Header> CreateHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    Veneris::Communications::VenerisMessageTypes type = Veneris::Communications::VenerisMessageTypes_Reserved,
    uint32_t size = 0,
    float time = 0.0f) {
  HeaderBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_size(size);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const Veneris::Communications::Header *GetHeader(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::Header>(buf);
}

inline const Veneris::Communications::Header *GetSizePrefixedHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::Header>(buf);
}

inline bool VerifyHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::Header>(nullptr);
}

inline bool VerifySizePrefixedHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::Header>(nullptr);
}

inline void FinishHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::Header> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::Header> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_HEADER_VENERIS_COMMUNICATIONS_H_
