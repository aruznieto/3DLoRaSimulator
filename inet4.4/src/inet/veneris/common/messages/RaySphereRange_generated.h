// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RAYSPHERERANGE_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_RAYSPHERERANGE_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct RaySphereRange;
struct RaySphereRangeBuilder;

struct RaySphereRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RaySphereRangeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INITELEVATION = 4,
    VT_ELEVATIONDELTA = 6,
    VT_ENDELEVATION = 8,
    VT_INITAZIMUTH = 10,
    VT_AZIMUTHDELTA = 12,
    VT_ENDAZIMUTH = 14
  };
  float initElevation() const {
    return GetField<float>(VT_INITELEVATION, 0.0f);
  }
  float elevationDelta() const {
    return GetField<float>(VT_ELEVATIONDELTA, 0.0f);
  }
  float endElevation() const {
    return GetField<float>(VT_ENDELEVATION, 0.0f);
  }
  float initAzimuth() const {
    return GetField<float>(VT_INITAZIMUTH, 0.0f);
  }
  float azimuthDelta() const {
    return GetField<float>(VT_AZIMUTHDELTA, 0.0f);
  }
  float endAzimuth() const {
    return GetField<float>(VT_ENDAZIMUTH, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_INITELEVATION) &&
           VerifyField<float>(verifier, VT_ELEVATIONDELTA) &&
           VerifyField<float>(verifier, VT_ENDELEVATION) &&
           VerifyField<float>(verifier, VT_INITAZIMUTH) &&
           VerifyField<float>(verifier, VT_AZIMUTHDELTA) &&
           VerifyField<float>(verifier, VT_ENDAZIMUTH) &&
           verifier.EndTable();
  }
};

struct RaySphereRangeBuilder {
  typedef RaySphereRange Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_initElevation(float initElevation) {
    fbb_.AddElement<float>(RaySphereRange::VT_INITELEVATION, initElevation, 0.0f);
  }
  void add_elevationDelta(float elevationDelta) {
    fbb_.AddElement<float>(RaySphereRange::VT_ELEVATIONDELTA, elevationDelta, 0.0f);
  }
  void add_endElevation(float endElevation) {
    fbb_.AddElement<float>(RaySphereRange::VT_ENDELEVATION, endElevation, 0.0f);
  }
  void add_initAzimuth(float initAzimuth) {
    fbb_.AddElement<float>(RaySphereRange::VT_INITAZIMUTH, initAzimuth, 0.0f);
  }
  void add_azimuthDelta(float azimuthDelta) {
    fbb_.AddElement<float>(RaySphereRange::VT_AZIMUTHDELTA, azimuthDelta, 0.0f);
  }
  void add_endAzimuth(float endAzimuth) {
    fbb_.AddElement<float>(RaySphereRange::VT_ENDAZIMUTH, endAzimuth, 0.0f);
  }
  explicit RaySphereRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RaySphereRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RaySphereRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<RaySphereRange> CreateRaySphereRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    float initElevation = 0.0f,
    float elevationDelta = 0.0f,
    float endElevation = 0.0f,
    float initAzimuth = 0.0f,
    float azimuthDelta = 0.0f,
    float endAzimuth = 0.0f) {
  RaySphereRangeBuilder builder_(_fbb);
  builder_.add_endAzimuth(endAzimuth);
  builder_.add_azimuthDelta(azimuthDelta);
  builder_.add_initAzimuth(initAzimuth);
  builder_.add_endElevation(endElevation);
  builder_.add_elevationDelta(elevationDelta);
  builder_.add_initElevation(initElevation);
  return builder_.Finish();
}

inline const Veneris::Communications::RaySphereRange *GetRaySphereRange(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::RaySphereRange>(buf);
}

inline const Veneris::Communications::RaySphereRange *GetSizePrefixedRaySphereRange(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::RaySphereRange>(buf);
}

inline bool VerifyRaySphereRangeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::RaySphereRange>(nullptr);
}

inline bool VerifySizePrefixedRaySphereRangeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::RaySphereRange>(nullptr);
}

inline void FinishRaySphereRangeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::RaySphereRange> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRaySphereRangeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::RaySphereRange> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_RAYSPHERERANGE_VENERIS_COMMUNICATIONS_H_
