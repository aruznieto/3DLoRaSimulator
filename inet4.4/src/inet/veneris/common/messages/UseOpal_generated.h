// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USEOPAL_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_USEOPAL_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct UseOpal;
struct UseOpalBuilder;

struct UseOpal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UseOpalBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FREQUENCY = 4,
    VT_AZIMUTHDELTA = 6,
    VT_ELEVATIONDELTA = 8,
    VT_MAXREFLECTIONS = 10,
    VT_USEDECIMALDEGREES = 12
  };
  float frequency() const {
    return GetField<float>(VT_FREQUENCY, 0.0f);
  }
  uint32_t azimuthDelta() const {
    return GetField<uint32_t>(VT_AZIMUTHDELTA, 0);
  }
  uint32_t elevationDelta() const {
    return GetField<uint32_t>(VT_ELEVATIONDELTA, 0);
  }
  uint32_t maxReflections() const {
    return GetField<uint32_t>(VT_MAXREFLECTIONS, 0);
  }
  bool useDecimalDegrees() const {
    return GetField<uint8_t>(VT_USEDECIMALDEGREES, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_FREQUENCY) &&
           VerifyField<uint32_t>(verifier, VT_AZIMUTHDELTA) &&
           VerifyField<uint32_t>(verifier, VT_ELEVATIONDELTA) &&
           VerifyField<uint32_t>(verifier, VT_MAXREFLECTIONS) &&
           VerifyField<uint8_t>(verifier, VT_USEDECIMALDEGREES) &&
           verifier.EndTable();
  }
};

struct UseOpalBuilder {
  typedef UseOpal Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frequency(float frequency) {
    fbb_.AddElement<float>(UseOpal::VT_FREQUENCY, frequency, 0.0f);
  }
  void add_azimuthDelta(uint32_t azimuthDelta) {
    fbb_.AddElement<uint32_t>(UseOpal::VT_AZIMUTHDELTA, azimuthDelta, 0);
  }
  void add_elevationDelta(uint32_t elevationDelta) {
    fbb_.AddElement<uint32_t>(UseOpal::VT_ELEVATIONDELTA, elevationDelta, 0);
  }
  void add_maxReflections(uint32_t maxReflections) {
    fbb_.AddElement<uint32_t>(UseOpal::VT_MAXREFLECTIONS, maxReflections, 0);
  }
  void add_useDecimalDegrees(bool useDecimalDegrees) {
    fbb_.AddElement<uint8_t>(UseOpal::VT_USEDECIMALDEGREES, static_cast<uint8_t>(useDecimalDegrees), 0);
  }
  explicit UseOpalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UseOpal> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UseOpal>(end);
    return o;
  }
};

inline flatbuffers::Offset<UseOpal> CreateUseOpal(
    flatbuffers::FlatBufferBuilder &_fbb,
    float frequency = 0.0f,
    uint32_t azimuthDelta = 0,
    uint32_t elevationDelta = 0,
    uint32_t maxReflections = 0,
    bool useDecimalDegrees = false) {
  UseOpalBuilder builder_(_fbb);
  builder_.add_maxReflections(maxReflections);
  builder_.add_elevationDelta(elevationDelta);
  builder_.add_azimuthDelta(azimuthDelta);
  builder_.add_frequency(frequency);
  builder_.add_useDecimalDegrees(useDecimalDegrees);
  return builder_.Finish();
}

inline const Veneris::Communications::UseOpal *GetUseOpal(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::UseOpal>(buf);
}

inline const Veneris::Communications::UseOpal *GetSizePrefixedUseOpal(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::UseOpal>(buf);
}

inline bool VerifyUseOpalBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::UseOpal>(nullptr);
}

inline bool VerifySizePrefixedUseOpalBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::UseOpal>(nullptr);
}

inline void FinishUseOpalBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::UseOpal> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUseOpalBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::UseOpal> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_USEOPAL_VENERIS_COMMUNICATIONS_H_
