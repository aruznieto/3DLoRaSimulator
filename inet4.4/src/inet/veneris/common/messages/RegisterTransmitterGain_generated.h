// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REGISTERTRANSMITTERGAIN_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_REGISTERTRANSMITTERGAIN_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct RegisterTransmitterGain;
struct RegisterTransmitterGainBuilder;

struct RegisterTransmitterGain FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RegisterTransmitterGainBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TXID = 4,
    VT_GAINID = 6
  };
  int32_t txId() const {
    return GetField<int32_t>(VT_TXID, 0);
  }
  int32_t gainId() const {
    return GetField<int32_t>(VT_GAINID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TXID) &&
           VerifyField<int32_t>(verifier, VT_GAINID) &&
           verifier.EndTable();
  }
};

struct RegisterTransmitterGainBuilder {
  typedef RegisterTransmitterGain Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_txId(int32_t txId) {
    fbb_.AddElement<int32_t>(RegisterTransmitterGain::VT_TXID, txId, 0);
  }
  void add_gainId(int32_t gainId) {
    fbb_.AddElement<int32_t>(RegisterTransmitterGain::VT_GAINID, gainId, 0);
  }
  explicit RegisterTransmitterGainBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RegisterTransmitterGain> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RegisterTransmitterGain>(end);
    return o;
  }
};

inline flatbuffers::Offset<RegisterTransmitterGain> CreateRegisterTransmitterGain(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t txId = 0,
    int32_t gainId = 0) {
  RegisterTransmitterGainBuilder builder_(_fbb);
  builder_.add_gainId(gainId);
  builder_.add_txId(txId);
  return builder_.Finish();
}

inline const Veneris::Communications::RegisterTransmitterGain *GetRegisterTransmitterGain(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::RegisterTransmitterGain>(buf);
}

inline const Veneris::Communications::RegisterTransmitterGain *GetSizePrefixedRegisterTransmitterGain(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::RegisterTransmitterGain>(buf);
}

inline bool VerifyRegisterTransmitterGainBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::RegisterTransmitterGain>(nullptr);
}

inline bool VerifySizePrefixedRegisterTransmitterGainBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::RegisterTransmitterGain>(nullptr);
}

inline void FinishRegisterTransmitterGainBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::RegisterTransmitterGain> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRegisterTransmitterGainBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::RegisterTransmitterGain> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_REGISTERTRANSMITTERGAIN_VENERIS_COMMUNICATIONS_H_
