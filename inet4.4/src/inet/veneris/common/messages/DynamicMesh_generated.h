// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DYNAMICMESH_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_DYNAMICMESH_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct DynamicMesh;
struct DynamicMeshBuilder;

struct DynamicMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DynamicMeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_VERTICES = 6,
    VT_INDEXES = 8,
    VT_MATERIAL = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<const Veneris::Communications::Vec3 *> *vertices() const {
    return GetPointer<const flatbuffers::Vector<const Veneris::Communications::Vec3 *> *>(VT_VERTICES);
  }
  const flatbuffers::Vector<int32_t> *indexes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INDEXES);
  }
  const Veneris::Communications::MaterialEMP *material() const {
    return GetStruct<const Veneris::Communications::MaterialEMP *>(VT_MATERIAL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffset(verifier, VT_INDEXES) &&
           verifier.VerifyVector(indexes()) &&
           VerifyField<Veneris::Communications::MaterialEMP>(verifier, VT_MATERIAL) &&
           verifier.EndTable();
  }
};

struct DynamicMeshBuilder {
  typedef DynamicMesh Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(DynamicMesh::VT_ID, id, 0);
  }
  void add_vertices(flatbuffers::Offset<flatbuffers::Vector<const Veneris::Communications::Vec3 *>> vertices) {
    fbb_.AddOffset(DynamicMesh::VT_VERTICES, vertices);
  }
  void add_indexes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> indexes) {
    fbb_.AddOffset(DynamicMesh::VT_INDEXES, indexes);
  }
  void add_material(const Veneris::Communications::MaterialEMP *material) {
    fbb_.AddStruct(DynamicMesh::VT_MATERIAL, material);
  }
  explicit DynamicMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DynamicMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DynamicMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<DynamicMesh> CreateDynamicMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Veneris::Communications::Vec3 *>> vertices = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> indexes = 0,
    const Veneris::Communications::MaterialEMP *material = 0) {
  DynamicMeshBuilder builder_(_fbb);
  builder_.add_material(material);
  builder_.add_indexes(indexes);
  builder_.add_vertices(vertices);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<DynamicMesh> CreateDynamicMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const std::vector<Veneris::Communications::Vec3> *vertices = nullptr,
    const std::vector<int32_t> *indexes = nullptr,
    const Veneris::Communications::MaterialEMP *material = 0) {
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<Veneris::Communications::Vec3>(*vertices) : 0;
  auto indexes__ = indexes ? _fbb.CreateVector<int32_t>(*indexes) : 0;
  return Veneris::Communications::CreateDynamicMesh(
      _fbb,
      id,
      vertices__,
      indexes__,
      material);
}

inline const Veneris::Communications::DynamicMesh *GetDynamicMesh(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::DynamicMesh>(buf);
}

inline const Veneris::Communications::DynamicMesh *GetSizePrefixedDynamicMesh(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::DynamicMesh>(buf);
}

inline bool VerifyDynamicMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::DynamicMesh>(nullptr);
}

inline bool VerifySizePrefixedDynamicMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::DynamicMesh>(nullptr);
}

inline void FinishDynamicMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::DynamicMesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDynamicMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::DynamicMesh> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_DYNAMICMESH_VENERIS_COMMUNICATIONS_H_
