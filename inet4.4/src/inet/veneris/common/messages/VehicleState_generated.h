// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VEHICLESTATE_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_VEHICLESTATE_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct VehicleState;
struct VehicleStateBuilder;

struct VehicleState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VehicleStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_VELOCITY = 6,
    VT_ID = 8
  };
  const Veneris::Communications::Vec3 *position() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_POSITION);
  }
  const Veneris::Communications::Vec3 *velocity() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_VELOCITY);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_POSITION) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_VELOCITY) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct VehicleStateBuilder {
  typedef VehicleState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const Veneris::Communications::Vec3 *position) {
    fbb_.AddStruct(VehicleState::VT_POSITION, position);
  }
  void add_velocity(const Veneris::Communications::Vec3 *velocity) {
    fbb_.AddStruct(VehicleState::VT_VELOCITY, velocity);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(VehicleState::VT_ID, id, 0);
  }
  explicit VehicleStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<VehicleState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VehicleState>(end);
    return o;
  }
};

inline flatbuffers::Offset<VehicleState> CreateVehicleState(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Veneris::Communications::Vec3 *position = 0,
    const Veneris::Communications::Vec3 *velocity = 0,
    uint32_t id = 0) {
  VehicleStateBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_velocity(velocity);
  builder_.add_position(position);
  return builder_.Finish();
}

inline const Veneris::Communications::VehicleState *GetVehicleState(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::VehicleState>(buf);
}

inline const Veneris::Communications::VehicleState *GetSizePrefixedVehicleState(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::VehicleState>(buf);
}

inline bool VerifyVehicleStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::VehicleState>(nullptr);
}

inline bool VerifySizePrefixedVehicleStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::VehicleState>(nullptr);
}

inline void FinishVehicleStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::VehicleState> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVehicleStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::VehicleState> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_VEHICLESTATE_VENERIS_COMMUNICATIONS_H_
