// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OPALEDGE_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_OPALEDGE_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct OpalEdge;
struct OpalEdgeBuilder;

struct OpalEdge FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OpalEdgeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_P = 4,
    VT_V = 6,
    VT_FACE_A = 8,
    VT_FACE_B = 10,
    VT_NORMAL_A = 12,
    VT_NORMAL_B = 14,
    VT_MATERIAL = 16,
    VT_FAID = 18,
    VT_FBID = 20,
    VT_ID = 22
  };
  const Veneris::Communications::Vec3 *p() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_P);
  }
  const Veneris::Communications::Vec3 *v() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_V);
  }
  const Veneris::Communications::Vec3 *face_a() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_FACE_A);
  }
  const Veneris::Communications::Vec3 *face_b() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_FACE_B);
  }
  const Veneris::Communications::Vec3 *normal_a() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_NORMAL_A);
  }
  const Veneris::Communications::Vec3 *normal_b() const {
    return GetStruct<const Veneris::Communications::Vec3 *>(VT_NORMAL_B);
  }
  const Veneris::Communications::MaterialEMP *material() const {
    return GetStruct<const Veneris::Communications::MaterialEMP *>(VT_MATERIAL);
  }
  uint32_t faid() const {
    return GetField<uint32_t>(VT_FAID, 0);
  }
  uint32_t fbid() const {
    return GetField<uint32_t>(VT_FBID, 0);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_P) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_V) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_FACE_A) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_FACE_B) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_NORMAL_A) &&
           VerifyField<Veneris::Communications::Vec3>(verifier, VT_NORMAL_B) &&
           VerifyField<Veneris::Communications::MaterialEMP>(verifier, VT_MATERIAL) &&
           VerifyField<uint32_t>(verifier, VT_FAID) &&
           VerifyField<uint32_t>(verifier, VT_FBID) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct OpalEdgeBuilder {
  typedef OpalEdge Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_p(const Veneris::Communications::Vec3 *p) {
    fbb_.AddStruct(OpalEdge::VT_P, p);
  }
  void add_v(const Veneris::Communications::Vec3 *v) {
    fbb_.AddStruct(OpalEdge::VT_V, v);
  }
  void add_face_a(const Veneris::Communications::Vec3 *face_a) {
    fbb_.AddStruct(OpalEdge::VT_FACE_A, face_a);
  }
  void add_face_b(const Veneris::Communications::Vec3 *face_b) {
    fbb_.AddStruct(OpalEdge::VT_FACE_B, face_b);
  }
  void add_normal_a(const Veneris::Communications::Vec3 *normal_a) {
    fbb_.AddStruct(OpalEdge::VT_NORMAL_A, normal_a);
  }
  void add_normal_b(const Veneris::Communications::Vec3 *normal_b) {
    fbb_.AddStruct(OpalEdge::VT_NORMAL_B, normal_b);
  }
  void add_material(const Veneris::Communications::MaterialEMP *material) {
    fbb_.AddStruct(OpalEdge::VT_MATERIAL, material);
  }
  void add_faid(uint32_t faid) {
    fbb_.AddElement<uint32_t>(OpalEdge::VT_FAID, faid, 0);
  }
  void add_fbid(uint32_t fbid) {
    fbb_.AddElement<uint32_t>(OpalEdge::VT_FBID, fbid, 0);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(OpalEdge::VT_ID, id, 0);
  }
  explicit OpalEdgeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OpalEdge> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OpalEdge>(end);
    return o;
  }
};

inline flatbuffers::Offset<OpalEdge> CreateOpalEdge(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Veneris::Communications::Vec3 *p = 0,
    const Veneris::Communications::Vec3 *v = 0,
    const Veneris::Communications::Vec3 *face_a = 0,
    const Veneris::Communications::Vec3 *face_b = 0,
    const Veneris::Communications::Vec3 *normal_a = 0,
    const Veneris::Communications::Vec3 *normal_b = 0,
    const Veneris::Communications::MaterialEMP *material = 0,
    uint32_t faid = 0,
    uint32_t fbid = 0,
    int32_t id = 0) {
  OpalEdgeBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_fbid(fbid);
  builder_.add_faid(faid);
  builder_.add_material(material);
  builder_.add_normal_b(normal_b);
  builder_.add_normal_a(normal_a);
  builder_.add_face_b(face_b);
  builder_.add_face_a(face_a);
  builder_.add_v(v);
  builder_.add_p(p);
  return builder_.Finish();
}

inline const Veneris::Communications::OpalEdge *GetOpalEdge(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::OpalEdge>(buf);
}

inline const Veneris::Communications::OpalEdge *GetSizePrefixedOpalEdge(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::OpalEdge>(buf);
}

inline bool VerifyOpalEdgeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::OpalEdge>(nullptr);
}

inline bool VerifySizePrefixedOpalEdgeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::OpalEdge>(nullptr);
}

inline void FinishOpalEdgeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::OpalEdge> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOpalEdgeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::OpalEdge> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_OPALEDGE_VENERIS_COMMUNICATIONS_H_
