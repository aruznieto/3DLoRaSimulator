// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIGOPAL_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_CONFIGOPAL_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "BaseTypes_generated.h"

namespace Veneris {
namespace Communications {

struct ConfigOpal;
struct ConfigOpalBuilder;

struct ConfigOpal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConfigOpalBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FREQUENCY = 4,
    VT_SIMTYPE = 6,
    VT_COMPUTEMODE = 8,
    VT_MAXREFLECTIONS = 10,
    VT_USEEXACTSPEEDOFLIGHT = 12,
    VT_USEDIFFRACTION = 14,
    VT_ENABLEFASTMATH = 16,
    VT_GENERATERAYSONLAUNCH = 18,
    VT_MULTIGPU = 20,
    VT_LOGTRACE = 22,
    VT_MULTITRANSMITTER = 24,
    VT_USEANTENNAGAIN = 26,
    VT_MINEPSILON = 28
  };
  float frequency() const {
    return GetField<float>(VT_FREQUENCY, 0.0f);
  }
  int32_t simType() const {
    return GetField<int32_t>(VT_SIMTYPE, 0);
  }
  int32_t computeMode() const {
    return GetField<int32_t>(VT_COMPUTEMODE, 0);
  }
  uint32_t maxReflections() const {
    return GetField<uint32_t>(VT_MAXREFLECTIONS, 0);
  }
  bool useExactSpeedOfLight() const {
    return GetField<uint8_t>(VT_USEEXACTSPEEDOFLIGHT, 0) != 0;
  }
  bool useDiffraction() const {
    return GetField<uint8_t>(VT_USEDIFFRACTION, 0) != 0;
  }
  bool enableFastMath() const {
    return GetField<uint8_t>(VT_ENABLEFASTMATH, 0) != 0;
  }
  bool generateRaysOnLaunch() const {
    return GetField<uint8_t>(VT_GENERATERAYSONLAUNCH, 0) != 0;
  }
  bool multiGPU() const {
    return GetField<uint8_t>(VT_MULTIGPU, 0) != 0;
  }
  bool logTrace() const {
    return GetField<uint8_t>(VT_LOGTRACE, 0) != 0;
  }
  bool multiTransmitter() const {
    return GetField<uint8_t>(VT_MULTITRANSMITTER, 0) != 0;
  }
  bool useAntennaGain() const {
    return GetField<uint8_t>(VT_USEANTENNAGAIN, 0) != 0;
  }
  float minEpsilon() const {
    return GetField<float>(VT_MINEPSILON, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_FREQUENCY) &&
           VerifyField<int32_t>(verifier, VT_SIMTYPE) &&
           VerifyField<int32_t>(verifier, VT_COMPUTEMODE) &&
           VerifyField<uint32_t>(verifier, VT_MAXREFLECTIONS) &&
           VerifyField<uint8_t>(verifier, VT_USEEXACTSPEEDOFLIGHT) &&
           VerifyField<uint8_t>(verifier, VT_USEDIFFRACTION) &&
           VerifyField<uint8_t>(verifier, VT_ENABLEFASTMATH) &&
           VerifyField<uint8_t>(verifier, VT_GENERATERAYSONLAUNCH) &&
           VerifyField<uint8_t>(verifier, VT_MULTIGPU) &&
           VerifyField<uint8_t>(verifier, VT_LOGTRACE) &&
           VerifyField<uint8_t>(verifier, VT_MULTITRANSMITTER) &&
           VerifyField<uint8_t>(verifier, VT_USEANTENNAGAIN) &&
           VerifyField<float>(verifier, VT_MINEPSILON) &&
           verifier.EndTable();
  }
};

struct ConfigOpalBuilder {
  typedef ConfigOpal Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frequency(float frequency) {
    fbb_.AddElement<float>(ConfigOpal::VT_FREQUENCY, frequency, 0.0f);
  }
  void add_simType(int32_t simType) {
    fbb_.AddElement<int32_t>(ConfigOpal::VT_SIMTYPE, simType, 0);
  }
  void add_computeMode(int32_t computeMode) {
    fbb_.AddElement<int32_t>(ConfigOpal::VT_COMPUTEMODE, computeMode, 0);
  }
  void add_maxReflections(uint32_t maxReflections) {
    fbb_.AddElement<uint32_t>(ConfigOpal::VT_MAXREFLECTIONS, maxReflections, 0);
  }
  void add_useExactSpeedOfLight(bool useExactSpeedOfLight) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_USEEXACTSPEEDOFLIGHT, static_cast<uint8_t>(useExactSpeedOfLight), 0);
  }
  void add_useDiffraction(bool useDiffraction) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_USEDIFFRACTION, static_cast<uint8_t>(useDiffraction), 0);
  }
  void add_enableFastMath(bool enableFastMath) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_ENABLEFASTMATH, static_cast<uint8_t>(enableFastMath), 0);
  }
  void add_generateRaysOnLaunch(bool generateRaysOnLaunch) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_GENERATERAYSONLAUNCH, static_cast<uint8_t>(generateRaysOnLaunch), 0);
  }
  void add_multiGPU(bool multiGPU) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_MULTIGPU, static_cast<uint8_t>(multiGPU), 0);
  }
  void add_logTrace(bool logTrace) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_LOGTRACE, static_cast<uint8_t>(logTrace), 0);
  }
  void add_multiTransmitter(bool multiTransmitter) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_MULTITRANSMITTER, static_cast<uint8_t>(multiTransmitter), 0);
  }
  void add_useAntennaGain(bool useAntennaGain) {
    fbb_.AddElement<uint8_t>(ConfigOpal::VT_USEANTENNAGAIN, static_cast<uint8_t>(useAntennaGain), 0);
  }
  void add_minEpsilon(float minEpsilon) {
    fbb_.AddElement<float>(ConfigOpal::VT_MINEPSILON, minEpsilon, 0.0f);
  }
  explicit ConfigOpalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ConfigOpal> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConfigOpal>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConfigOpal> CreateConfigOpal(
    flatbuffers::FlatBufferBuilder &_fbb,
    float frequency = 0.0f,
    int32_t simType = 0,
    int32_t computeMode = 0,
    uint32_t maxReflections = 0,
    bool useExactSpeedOfLight = false,
    bool useDiffraction = false,
    bool enableFastMath = false,
    bool generateRaysOnLaunch = false,
    bool multiGPU = false,
    bool logTrace = false,
    bool multiTransmitter = false,
    bool useAntennaGain = false,
    float minEpsilon = 0.0f) {
  ConfigOpalBuilder builder_(_fbb);
  builder_.add_minEpsilon(minEpsilon);
  builder_.add_maxReflections(maxReflections);
  builder_.add_computeMode(computeMode);
  builder_.add_simType(simType);
  builder_.add_frequency(frequency);
  builder_.add_useAntennaGain(useAntennaGain);
  builder_.add_multiTransmitter(multiTransmitter);
  builder_.add_logTrace(logTrace);
  builder_.add_multiGPU(multiGPU);
  builder_.add_generateRaysOnLaunch(generateRaysOnLaunch);
  builder_.add_enableFastMath(enableFastMath);
  builder_.add_useDiffraction(useDiffraction);
  builder_.add_useExactSpeedOfLight(useExactSpeedOfLight);
  return builder_.Finish();
}

inline const Veneris::Communications::ConfigOpal *GetConfigOpal(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::ConfigOpal>(buf);
}

inline const Veneris::Communications::ConfigOpal *GetSizePrefixedConfigOpal(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::ConfigOpal>(buf);
}

inline bool VerifyConfigOpalBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::ConfigOpal>(nullptr);
}

inline bool VerifySizePrefixedConfigOpalBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::ConfigOpal>(nullptr);
}

inline void FinishConfigOpalBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::ConfigOpal> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConfigOpalBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::ConfigOpal> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_CONFIGOPAL_VENERIS_COMMUNICATIONS_H_
