// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXTERNALTIME_VENERIS_COMMUNICATIONS_H_
#define FLATBUFFERS_GENERATED_EXTERNALTIME_VENERIS_COMMUNICATIONS_H_

#include "flatbuffers/flatbuffers.h"

namespace Veneris {
namespace Communications {

struct ExternalTime;
struct ExternalTimeBuilder;

struct ExternalTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExternalTimeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4
  };
  float time() const {
    return GetField<float>(VT_TIME, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct ExternalTimeBuilder {
  typedef ExternalTime Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(float time) {
    fbb_.AddElement<float>(ExternalTime::VT_TIME, time, 0.0f);
  }
  explicit ExternalTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ExternalTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExternalTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExternalTime> CreateExternalTime(
    flatbuffers::FlatBufferBuilder &_fbb,
    float time = 0.0f) {
  ExternalTimeBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

inline const Veneris::Communications::ExternalTime *GetExternalTime(const void *buf) {
  return flatbuffers::GetRoot<Veneris::Communications::ExternalTime>(buf);
}

inline const Veneris::Communications::ExternalTime *GetSizePrefixedExternalTime(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Veneris::Communications::ExternalTime>(buf);
}

inline bool VerifyExternalTimeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Veneris::Communications::ExternalTime>(nullptr);
}

inline bool VerifySizePrefixedExternalTimeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Veneris::Communications::ExternalTime>(nullptr);
}

inline void FinishExternalTimeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::ExternalTime> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedExternalTimeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Veneris::Communications::ExternalTime> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communications
}  // namespace Veneris

#endif  // FLATBUFFERS_GENERATED_EXTERNALTIME_VENERIS_COMMUNICATIONS_H_
